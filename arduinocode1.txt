#include <WiFi.h>
#include <WebSocketsClient.h>
#include <HTTPClient.h>
#include <DHT.h>
#include <ArduinoJson.h>  // Add this line

// WiFi Configuration
const char* ssid = "Ben8";
const char* password = "flutters";

// Server Configuration
const char* websocket_server = "192.168.23.201";
const char* http_server = "192.168.23.201";
const uint16_t port = 3000;

// DHT Sensor
#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// Relay (bulb control)
const int bulbPin = 2;

// Timers
const unsigned long sensorInterval = 5000;
unsigned long previousMillis = 0;
float currentTemp = 0;
float currentHumidity = 0;
String bulbState = "off";

WebSocketsClient webSocket;

void setup() {
  Serial.begin(115200);
  Serial2.begin(9600, SERIAL_8N1, 16, 17); // Communication with Mega

  pinMode(bulbPin, OUTPUT);
  digitalWrite(bulbPin, LOW);

  dht.begin();

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected");

  // WebSocket setup
  webSocket.begin(websocket_server, port, "/");
  webSocket.onEvent(webSocketEvent);
  webSocket.setReconnectInterval(5000);

  // Send initial bulb state to server
  sendBulbStatus();
}

void loop() {
  webSocket.loop();

  // 1. Handle messages from Arduino Mega
  if (Serial2.available()) {
    String payload = Serial2.readStringUntil('\n');
    payload.trim();
    Serial.println("From Mega: " + payload);

    // Determine message type
    if (payload.indexOf("\"type\":\"keypad\"") != -1) {
      sendKeypadEvent(payload);
    } 
    else if (payload.indexOf("\"type\":\"rfid\"") != -1) {
      sendRFIDEvent(payload);
    }
  }

  // 2. Read and send sensor data periodically
  if (millis() - previousMillis >= sensorInterval) {
    previousMillis = millis();
    readAndSendSensorData();
  }
}

void readAndSendSensorData() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();
  
  if (!isnan(h) && !isnan(t)) {
    currentTemp = t;
    currentHumidity = h;

    // Create JSON payload
    String sensorPayload = "{\"temperature\":" + String(t,1) + 
                          ",\"humidity\":" + String(h,1) + 
                          ",\"timestamp\":" + String(millis()/1000) + 
                          ",\"datetime\":\"" + getDateTime() + "\"}";

    // Send to Node server
    sendHTTPPost("/api/sensor-data", sensorPayload);
    
    // Also send to Mega if needed
    Serial2.println("{\"type\":\"sensor\",\"temperature\":" + String(t,1) + ",\"humidity\":" + String(h,1) + "}");
  }
}

void sendKeypadEvent(String payload) {
  sendHTTPPost("/api/keypad-events", payload);
}

void sendRFIDEvent(String payload) {
  // Simple string manipulation instead of JSON parsing
  int statusStart = payload.indexOf("\"status\":\"") + 10;
  int statusEnd = payload.indexOf("\"", statusStart);
  String status = payload.substring(statusStart, statusEnd);
  
  int tagStart = payload.indexOf("\"tag\":\"") + 7;
  int tagEnd = payload.indexOf("\"", tagStart);
  String tag = payload.substring(tagStart, tagEnd);
  
  String rfidPayload = "{\"status\":\"" + status + " access\",\"tag\":\"" + tag + "\"}";
  sendHTTPPost("/api/rfid-event", rfidPayload);
}

void sendHTTPPost(String endpoint, String payload) {
  HTTPClient http;
  http.begin("http://" + String(http_server) + ":" + port + endpoint);
  http.addHeader("Content-Type", "application/json");
  
  int httpCode = http.POST(payload);
  if (httpCode > 0) {
    Serial.printf("[HTTP] POST to %s: %d\n", endpoint.c_str(), httpCode);
  } else {
    Serial.printf("[HTTP] POST failed, error: %s\n", http.errorToString(httpCode).c_str());
  }
  http.end();
}

void sendBulbStatus() {
  String payload = "status:" + bulbState;
  webSocket.sendTXT(payload);
}

void updateBulbState(String newState) {
  if (newState != bulbState) {
    bulbState = newState;
    digitalWrite(bulbPin, (bulbState == "on") ? HIGH : LOW);
    sendBulbStatus();
    
    // Also update sensor data structure
    String sensorPayload = "{\"bulbState\":" + String(bulbState == "on" ? "true" : "false") + "}";
    sendHTTPPost("/api/sensor-data", sensorPayload);
  }
}

String getDateTime() {
  // This is a placeholder - in a real implementation you'd get actual time
  // from NTP or similar
  return "2023-01-01T00:00:00Z";
}

void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
  switch (type) {
    case WStype_DISCONNECTED:
      Serial.println("[WS] Disconnected");
      break;
      
    case WStype_CONNECTED:
      Serial.println("[WS] Connected");
      // Send initial bulb state
      webSocket.sendTXT("status:" + bulbState);
      break;
      
    case WStype_TEXT:
      {
        String message = (char*)payload;
        Serial.println("[WS] Received: " + message);
        
        if (message == "on" || message == "off") {
          updateBulbState(message);
        }
      }
      break;
      
    case WStype_ERROR:
      Serial.printf("[WS] Error: %u\n", *payload);
      break;
  }
}
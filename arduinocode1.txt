#include <WiFi.h>
#include <WebSocketsClient.h>
#include <HTTPClient.h>
#include <DHT.h>
#include <RTClib.h>
#include <LiquidCrystal.h>
#include <SPI.h>
#include <MFRC522.h>

// LCD Configuration
#define LCD_RS  27
#define LCD_E   26
#define LCD_D4  14
#define LCD_D5  12
#define LCD_D6  13
#define LCD_D7  15
LiquidCrystal lcd(LCD_RS, LCD_E, LCD_D4, LCD_D5, LCD_D6, LCD_D7);

// WiFi Configuration
const char* ssid = "Ben8";
const char* password = "flutters";

// Server Configuration
const char* websocket_server = "192.168.23.201";
const char* http_server = "192.168.23.201";
const uint16_t port = 3000;
const int bulbPin = 2;

// Hardware Configuration
#define BULB1_PIN 25
#define BULB2_PIN 33
#define DHTPIN 4
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

// RFID Configuration
#define RST_PIN 5
#define SS_PIN 22
MFRC522 mfrc522(SS_PIN, RST_PIN);
const String authorizedTag1 = "63 8D 75 DA";
const String authorizedTag2 = "CC 68 8A 3F";

// Timing
const unsigned long sensorInterval = 2000;
unsigned long previousMillis = 0;

// Sensor values
float currentTemp = 0;
float currentHumidity = 0;

WebSocketsClient webSocket;

void setup() {
  Serial.begin(115200);
  while (!Serial);

  // Arduino Mega TX1 -> ESP32 RX=16 (GPIO16), Arduino Mega RX1 -> ESP32 TX=17 (GPIO17)
  Serial2.begin(9600, SERIAL_8N1, 16, 17);
  
  // Initialize SPI for RFID
  SPI.begin();
  mfrc522.PCD_Init();
  Serial.println("RFID Reader Initialized");

  // Initialize pins
  pinMode(bulbPin, OUTPUT);
  pinMode(BULB1_PIN, OUTPUT);
  pinMode(BULB2_PIN, OUTPUT);
  digitalWrite(bulbPin, LOW);
  digitalWrite(BULB1_PIN, LOW);
  digitalWrite(BULB2_PIN, LOW);

  // DHT
  dht.begin();

  // LCD
  lcd.begin(20, 4);
  lcd.print("Connecting WiFi...");

  // WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nWiFi Connected");
  lcd.clear();
  lcd.print("WiFi Connected");

  // WebSocket
  webSocket.begin(websocket_server, port, "/");
  webSocket.onEvent(webSocketEvent);

  delay(1000);
  lcd.clear();
  lcd.print("System Ready");
}

void loop() {
  webSocket.loop();

  // RFID card reading
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    handleRFID();
    mfrc522.PICC_HaltA();
    mfrc522.PCD_StopCrypto1();
    delay(3000); // Bulb on for 3s
    digitalWrite(BULB1_PIN, LOW);
    digitalWrite(BULB2_PIN, LOW);
  }

  // Sensor readings
  if (millis() - previousMillis >= sensorInterval) {
    previousMillis = millis();
    readSensors();
  }

  // ---------------------------
  // NEW: Handle Keypad payloads
  // ---------------------------
  if (Serial2.available()) {
    String keypadJson = Serial2.readStringUntil('\n');
    keypadJson.trim();
    Serial.println("Received from Arduino (keypad): " + keypadJson);

    // Forward to Node server
    HTTPClient http;
    http.begin("http://" + String(http_server) + ":" + port + "/api/keypad-events");
    http.addHeader("Content-Type", "application/json");
    http.POST(keypadJson);
    http.end();
  }
}

void handleRFID() {
  String uid = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) {
    if (mfrc522.uid.uidByte[i] < 0x10) uid += "0";
    uid += String(mfrc522.uid.uidByte[i], HEX);
    if (i < mfrc522.uid.size - 1) uid += " ";
  }
  uid.toUpperCase();

  Serial.print("Scanned UID: ");
  Serial.println(uid);

  if (uid == authorizedTag1) {
    Serial.println("Authorized Tag 1 - Bulb 1 ON");
    digitalWrite(BULB1_PIN, HIGH);
    sendRfidEvent("granted access", uid, "bulb1_on");
  } 
  else if (uid == authorizedTag2) {
    Serial.println("Authorized Tag 2 - Bulb 2 ON");
    digitalWrite(BULB2_PIN, HIGH);
    sendRfidEvent("unauthorized access", uid, "bulb2_on");
  } 
  else {
    Serial.println("Unauthorized Tag");
    sendRfidEvent("denied", uid, "bulbs_off");
  }
}

void sendRfidEvent(String status, String tag, String action) {
  HTTPClient http;
  http.begin("http://" + String(http_server) + ":" + port + "/api/rfid-event");
  http.addHeader("Content-Type", "application/json");
  String payload = "{\"status\":\"" + status + "\",\"tag\":\"" + tag + "\",\"action\":\"" + action + "\"}";
  http.POST(payload);
  http.end();
}

void readSensors() {
  float h = dht.readHumidity();
  float t = dht.readTemperature();

  if (!isnan(h) && !isnan(t)) {
    currentTemp = t;
    currentHumidity = h;
    updateLCD();

    HTTPClient http;
    http.begin("http://" + String(http_server) + ":" + port + "/api/sensor-data");
    http.addHeader("Content-Type", "application/json");
    String payload = "{\"temperature\":" + String(t,1) + ",\"humidity\":" + String(h,1) + "}";
    http.POST(payload);
    http.end();
  }
}

void updateLCD() {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Temp: ");
  lcd.print(currentTemp, 1);
  lcd.print(" C");

  lcd.setCursor(0, 1);
  lcd.print("Hum:  ");
  lcd.print(currentHumidity, 1);
  lcd.print(" %");
}

void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
  switch(type) {
    case WStype_DISCONNECTED:
      Serial.println("[WS] Disconnected");
      break;
    case WStype_CONNECTED:
      Serial.println("[WS] Connected");
      break;
    case WStype_TEXT:
      if (strcmp((char*)payload, "bulb1_on") == 0) {
        digitalWrite(BULB1_PIN, HIGH);
      } else if (strcmp((char*)payload, "bulb2_on") == 0) {
        digitalWrite(BULB2_PIN, HIGH);
      } else if (strcmp((char*)payload, "bulbs_off") == 0) {
        digitalWrite(BULB1_PIN, LOW);
        digitalWrite(BULB2_PIN, LOW);
      } else if (strcmp((char*)payload, "on") == 0) {
        digitalWrite(bulbPin, HIGH);
      } else if (strcmp((char*)payload, "off") == 0) {
        digitalWrite(bulbPin, LOW);
      }
      break;
  }
}

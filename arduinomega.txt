#include <Keypad.h>
#include <Servo.h>
#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>

// ------------------- KEYPAD CONFIG -------------------
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  { '1', '2', '3', 'A' },
  { '4', '5', '6', 'B' },
  { '7', '8', '9', 'C' },
  { '*', '0', '#', 'D' }
};
byte rowPins[ROWS] = { 22, 23, 24, 25 };
byte colPins[COLS] = { 26, 27, 28, 29 };
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// ------------------- BUZZER, SERVO, BULBS -------------------
const int buzzerPin = 42;
Servo gateServo;
const int servoPin = 2;

const int bulb1Pin = 40;  // bulb1 (authorized tag)
const int bulb2Pin = 41;  // bulb2 (unauthorized tag)

// ------------------- LCD CONFIG -------------------
#define LCD_RS 30
#define LCD_E 31
#define LCD_D4 32
#define LCD_D5 33
#define LCD_D6 34
#define LCD_D7 35
LiquidCrystal lcd(LCD_RS, LCD_E, LCD_D4, LCD_D5, LCD_D6, LCD_D7);

// ------------------- RFID CONFIG -------------------
#define SS_PIN 53
#define RST_PIN 5
MFRC522 mfrc522(SS_PIN, RST_PIN);

const String authorizedTag1 = "63 8D 75 DA";
const String authorizedTag2 = "CC 68 8A 3F";

// ------------------- PIN LOGIC -------------------
const String correctPIN = "5555";
String enteredPIN = "";

void setup() {
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(buzzerPin, LOW);

  gateServo.attach(servoPin);
  gateServo.write(0);

  pinMode(bulb1Pin, OUTPUT);
  pinMode(bulb2Pin, OUTPUT);
  digitalWrite(bulb1Pin, LOW);
  digitalWrite(bulb2Pin, LOW);

  lcd.begin(20, 4);
  lcd.print("System Starting...");

  SPI.begin();
  mfrc522.PCD_Init();

  Serial.begin(9600);   // Debug
  Serial1.begin(9600);  // From ESP32

  lcd.setCursor(0, 1);
  lcd.print("Waiting for data...");
}

void loop() {
  handleKeypad();
  handleRFID();
  handleSensorData();
}

// ------------------- KEYPAD -------------------
// ------------------- KEYPAD -------------------
void handleKeypad() {
  char key = keypad.getKey();

  if (key) {
    beep(1, 30);

    if (key == '#') {
      if (enteredPIN.length() == 0) {
        Serial.println("No PIN entered.");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("No PIN entered");
        beep(2, 100);
      } else {
        String status = (enteredPIN == correctPIN) ? "granted" : "denied";
        String payload = "{\"type\":\"keypad\",\"status\":\"" + status + "\",\"pin\":\"" + enteredPIN + "\"}";
        Serial1.println(payload);

        lcd.clear();
        lcd.setCursor(0, 0);
        if (status == "granted") {
          lcd.print("Access Granted");
          digitalWrite(bulb1Pin, HIGH); // green
          digitalWrite(bulb2Pin, LOW);  // red off
          beep(1, 100);
          moveServoGate();
        } else {
          lcd.print("Access Denied");
          digitalWrite(bulb1Pin, LOW);  // green off
          digitalWrite(bulb2Pin, HIGH); // red
          beep(3, 100);
        }

        delay(3000); // keep bulb on for 3 sec
        digitalWrite(bulb1Pin, LOW);
        digitalWrite(bulb2Pin, LOW);
        
        // Return to normal display
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Temp: ");
        lcd.setCursor(0, 1);
        lcd.print("Hum:  ");

        enteredPIN = "";
      }
    } 
    else if (key == '*') {
      enteredPIN = "";
      beep(1, 50);
    }
    else if (isdigit(key)) {
      if (enteredPIN.length() < 6) {
        enteredPIN += key;
        // Show asterisks on LCD as user types
        lcd.setCursor(enteredPIN.length() - 1, 2);
        lcd.print("*");
      } else {
        beep(2, 50);
      }
    }
    delay(100);
  }
}

// ------------------- RFID -------------------
void handleRFID() {
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String uid = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      if (mfrc522.uid.uidByte[i] < 0x10) uid += "0";
      uid += String(mfrc522.uid.uidByte[i], HEX);
      if (i < mfrc522.uid.size - 1) uid += " ";
    }
    uid.toUpperCase();

    lcd.clear();
    lcd.setCursor(0, 0);
    
    if (uid == authorizedTag1) {
      lcd.print("Access Granted");
      digitalWrite(bulb1Pin, HIGH);
      digitalWrite(bulb2Pin, LOW);
      Serial1.println("{\"type\":\"rfid\",\"status\":\"granted\",\"tag\":\"" + uid + "\"}");
      beep(1, 100);
      moveServoGate();
    } else if (uid == authorizedTag2) {
      lcd.print("Access Denied");
      digitalWrite(bulb1Pin, LOW);
      digitalWrite(bulb2Pin, HIGH);
      Serial1.println("{\"type\":\"rfid\",\"status\":\"denied\",\"tag\":\"" + uid + "\"}");
      beep(3, 100);
    } else {
      lcd.print("Access Denied");
      digitalWrite(bulb1Pin, LOW);
      digitalWrite(bulb2Pin, LOW);
      Serial1.println("{\"type\":\"rfid\",\"status\":\"denied\",\"tag\":\"" + uid + "\"}");
      beep(3, 100);
    }

    mfrc522.PICC_HaltA();
    mfrc522.PCD_StopCrypto1();
    delay(3000);
    digitalWrite(bulb1Pin, LOW);
    digitalWrite(bulb2Pin, LOW);
    
    // Return to normal display
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Temp: ");
    lcd.setCursor(0, 1);
    lcd.print("Hum:  ");
  }
}

// ------------------- RECEIVE SENSOR DATA FROM ESP32 -------------------
void handleSensorData() {
  if (Serial1.available()) {
    String line = Serial1.readStringUntil('\n');
    line.trim();
    if (line.startsWith("{\"type\":\"sensor\"")) {
      // Parse temperature & humidity
      float temp = parseValue(line, "temperature");
      float hum = parseValue(line, "humidity");
      lcd.setCursor(0, 0);
      lcd.print("Temp: ");
      lcd.print(temp, 1);
      lcd.print(" C    ");
      lcd.setCursor(0, 1);
      lcd.print("Hum:  ");
      lcd.print(hum, 1);
      lcd.print(" %    ");
    }
  }
}

// ------------------- SIMPLE PARSER -------------------
float parseValue(String json, String key) {
  int keyIndex = json.indexOf("\"" + key + "\":");
  if (keyIndex == -1) return 0;
  int colonIndex = json.indexOf(':', keyIndex);
  int commaIndex = json.indexOf(',', colonIndex + 1);
  if (commaIndex == -1) commaIndex = json.indexOf('}', colonIndex + 1);
  String value = json.substring(colonIndex + 1, commaIndex);
  value.trim();
  return value.toFloat();
}

// ------------------- UTILS -------------------
void moveServoGate() {
  gateServo.write(90);
  delay(5000);
  gateServo.write(0);
}

void beep(int times, int duration) {
  for (int i = 0; i < times; i++) {
    digitalWrite(buzzerPin, HIGH);
    delay(duration);
    digitalWrite(buzzerPin, LOW);
    delay(100);
  }
}

#include <Keypad.h>
#include <Servo.h>
#include <SPI.h>
#include <MFRC522.h>

// ------------------- KEYPAD CONFIG -------------------
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {22, 23, 24, 25};
byte colPins[COLS] = {26, 27, 28, 29};

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// ------------------- BUZZER, SERVO, BULBS -------------------
const int buzzerPin = 3;
Servo gateServo;
const int servoPin = 2;

const int bulb1Pin = 25;  // bulb1 (authorized tag)
const int bulb2Pin = 33;  // bulb2 (unauthorized tag)

// ------------------- RFID CONFIG -------------------
#define SS_PIN 53   // Mega SPI SS (or use 10 if you wire it that way)
#define RST_PIN 5
MFRC522 mfrc522(SS_PIN, RST_PIN);

const String authorizedTag1 = "63 8D 75 DA";
const String authorizedTag2 = "CC 68 8A 3F";

// ------------------- PIN LOGIC -------------------
const String correctPIN = "5555";
String enteredPIN = "";

void setup() {
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(buzzerPin, LOW);

  gateServo.attach(servoPin);
  gateServo.write(0);

  pinMode(bulb1Pin, OUTPUT);
  pinMode(bulb2Pin, OUTPUT);
  digitalWrite(bulb1Pin, LOW);
  digitalWrite(bulb2Pin, LOW);

  SPI.begin();
  mfrc522.PCD_Init();

  Serial.begin(9600);
  Serial1.begin(9600);  // to ESP32

  Serial.println("System Ready. Enter PIN or scan RFID.");
}

void loop() {
  handleKeypad();
  handleRFID();
}

void handleKeypad() {
  char key = keypad.getKey();

  if (key) {
    beep(1, 30);

    if (key == '#') {
      if (enteredPIN.length() == 0) {
        Serial.println("No PIN entered.");
        beep(2, 100);
      } else {
        String status = (enteredPIN == correctPIN) ? "granted" : "denied";
        String payload = "{\"type\":\"keypad\",\"status\":\"" + status + "\",\"pin\":\"" + enteredPIN + "\"}";
        Serial.println("Sending to ESP32: " + payload);
        Serial1.println(payload);

        if (status == "granted") {
          beep(1, 100);
          moveServoGate();
        } else {
          beep(3, 100);
        }
        enteredPIN = "";
      }
    } 
    else if (key == '*') {
      enteredPIN = "";
      Serial.println("Input cleared.");
      beep(1, 50);
    }
    else if (isdigit(key)) {
      if (enteredPIN.length() < 6) {
        enteredPIN += key;
        Serial.print('*');
      } else {
        Serial.println("Max PIN length reached.");
        beep(2, 50);
      }
    }
    delay(100);
  }
}

void handleRFID() {
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String uid = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      if (mfrc522.uid.uidByte[i] < 0x10) uid += "0";
      uid += String(mfrc522.uid.uidByte[i], HEX);
      if (i < mfrc522.uid.size - 1) uid += " ";
    }
    uid.toUpperCase();

    Serial.print("Scanned UID: ");
    Serial.println(uid);

    if (uid == authorizedTag1) {
      Serial.println("Authorized Tag 1 - Bulb 1 ON");
      digitalWrite(bulb1Pin, HIGH);
      digitalWrite(bulb2Pin, LOW);

      String payload = "{\"type\":\"rfid\",\"status\":\"granted\",\"tag\":\"" + uid + "\"}";
      Serial1.println(payload);

      beep(1, 100);
      moveServoGate();
    }
    else if (uid == authorizedTag2) {
      Serial.println("Authorized Tag 2 (unauthorized) - Bulb 2 ON");
      digitalWrite(bulb1Pin, LOW);
      digitalWrite(bulb2Pin, HIGH);

      String payload = "{\"type\":\"rfid\",\"status\":\"denied\",\"tag\":\"" + uid + "\"}";
      Serial1.println(payload);

      beep(3, 100);
    }
    else {
      Serial.println("Unknown Tag - Access Denied");
      digitalWrite(bulb1Pin, LOW);
      digitalWrite(bulb2Pin, LOW);

      String payload = "{\"type\":\"rfid\",\"status\":\"denied\",\"tag\":\"" + uid + "\"}";
      Serial1.println(payload);

      beep(3, 100);
    }

    mfrc522.PICC_HaltA();
    mfrc522.PCD_StopCrypto1();

    delay(3000);
    digitalWrite(bulb1Pin, LOW);
    digitalWrite(bulb2Pin, LOW);
  }
}

void moveServoGate() {
  gateServo.write(90);
  delay(5000);
  gateServo.write(0);
}

void beep(int times, int duration) {
  for (int i = 0; i < times; i++) {
    digitalWrite(buzzerPin, HIGH);
    delay(duration);
    digitalWrite(buzzerPin, LOW);
    delay(100);
  }
}
